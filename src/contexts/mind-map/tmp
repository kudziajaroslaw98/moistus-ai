import { createClient, type SupabaseClient } from "@/helpers/supabase/client";
import { transformSupabaseData } from "@/helpers/transform-supabase-data";
import type { MindMapData } from "@/types/mind-map-data";
import { toast } from "sonner";
import type { StateCreator } from "zustand";
import type { AppState, LoadingStates } from "./app-state";

// Helper HOF for handling loading states and toasts
export function withLoadingAndToast<T extends (...args: any[]) => Promise<any>>(
  action: T,
  loadingKey: keyof LoadingStates,
  options?: {
    initialMessage?: string;
    errorMessage?: string;
    successMessage?: string;
  },
  // Allow explicit passing of set function for loading states
  // This makes the HOF more flexible if used outside a slice that has setLoadingStates directly
  customSetLoadingStates?: (loadingStates: Partial<LoadingStates>) => void,
): (...args: Parameters<T>) => Promise<Awaited<ReturnType<T>>> {
  return async (...args) => {
    // Attempt to get setLoadingStates from the store if not provided
    const store = useAppStore.getState() as SettingsSlice; // Cast to access setLoadingStates if available
    const setLoadingStatesFn = customSetLoadingStates || store.setLoadingStates;

    const toastId = toast.loading(options?.initialMessage || "Loading...");

    setLoadingStatesFn({ [loadingKey]: true });

    try {
      const res = await action(...args, toastId); // Pass toastId if action expects it
      toast.success(options?.successMessage || "Success!", { id: toastId });
      return res;
    } catch (e) {
      console.error(`Error in ${String(loadingKey)}:`, e);
      toast.error(
        e instanceof Error
          ? e.message
          : options?.errorMessage || "An error occurred.",
        { id: toastId },
      );
      // Re-throw the error so the caller can handle it if needed
      throw e;
    } finally {
      setLoadingStatesFn({ [loadingKey]: false });
    }
  };
}

export interface SettingsSliceState {
  supabase: SupabaseClient;
  mapId: string | null;
  mindMap: MindMapData | null;
  loadingStates: LoadingStates;
}

export interface SettingsSliceActions {
  setMapId: (mapId: string | null) => void;
  setMindMap: (mindMap: MindMapData | null) => void;
  setLoadingStates: (loadingStates: Partial<LoadingStates>) => void;
  fetchMindMapData: (mapId: string) => Promise<void>;
}

export type SettingsSlice = SettingsSliceState & SettingsSliceActions;

// Forward declaration for useAppStore to break circular dependency for withLoadingAndToast
let useAppStore: any;
export const _setAppStore = (store: any) => {
  useAppStore = store;
};

export const createSettingsSlice: StateCreator<
  AppState,
  [],
  [],
  SettingsSlice
> = (set, get) => ({
  supabase: createClient(),
  mapId: null,
  mindMap: null,
  loadingStates: {
    isFetchingMapData: false,
    isSavingNode: false,
    isSavingEdge: false,
    isDeletingNode: false,
    isDeletingEdge: false,
    isAddingNode: false,
    isUpdatingNode: false,
    isUpdatingEdge: false,
    isCreatingGroup: false,
    isDeletingGroup: false,
    isApplyingLayout: false,
    isFetchingComments: false,
    isAddingComment: false,
    isUpdatingComment: false,
    isDeletingComment: false,
    isResolvingComment: false,
  },

  setMapId: (mapId: string | null) => set({ mapId }),
  setMindMap: (mindMap: MindMapData | null) => set({ mindMap }),
  setLoadingStates: (loadingStates: Partial<LoadingStates>) =>
    set((state) => ({
      loadingStates: { ...state.loadingStates, ...loadingStates },
    })),

  fetchMindMapData: async (mapId: string) => {
    // Use the HOF by passing the core async logic
    const coreFetch = async (currentMapId: string, toastId?: string) => {
      if (!currentMapId) {
        throw new Error("Map ID is required.");
      }
      set({ mapId: currentMapId }); // Set mapId early

      const {
        supabase,
        setNodes,
        setEdges,
        setMindMap: setStoreMindMap,
      } = get(); // Assuming setNodes, setEdges are in AppState

      const { data, error } = await supabase
        .from("mind_maps")
        .select(
          `
          *,
          nodes:nodes!map_id(*),
          edges:edges!map_id(*)
        `,
        )
        .eq("id", currentMapId)
        .maybeSingle();

      if (error) {
        console.error("Error fetching mind map data:", error);
        throw new Error(error.message || "Failed to fetch mind map data.");
      }

      if (!data) {
        throw new Error("Mind map not found.");
      }

      const { nodes: rawNodes, edges: rawEdges, ...mapDetails } = data;
      const { nodes, edges } = transformSupabaseData(
        (rawNodes as any) || [],
        (rawEdges as any) || [],
      );

      setStoreMindMap(mapDetails as MindMapData);
      setNodes(nodes); // These will be from other slices
      setEdges(edges);
      get().addStateToHistory?.("Map Loaded", { nodes, edges }); // Call if history slice is present
    };

    // Wrap coreFetch with withLoadingAndToast
    // The HOF needs access to setLoadingStates, which is part of this slice.
    // We pass 'get().setLoadingStates' to ensure it uses the correct 'set' context.
    const wrappedFetch = withLoadingAndToast(
      coreFetch,
      "isFetchingMapData",
      {
        initialMessage: "Loading mind map...",
        errorMessage: "Failed to load mind map.",
        successMessage: "Mind map loaded!",
      },
      (loadingUpdate) => get().setLoadingStates(loadingUpdate), // Pass setLoadingStates from this slice's context
    );
    await wrappedFetch(mapId);
  },
});
